// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZooTrack.Data;

#nullable disable

namespace ZooTrackBackend.Migrations
{
    [DbContext(typeof(ZootrackDbContext))]
    [Migration("20250621152013_SeedDataMigration")]
    partial class SeedDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ZooTrack.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlertId");

                    b.HasIndex("DetectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Alerts");

                    b.HasData(
                        new
                        {
                            AlertId = 1,
                            CreatedAt = new DateTime(2025, 6, 19, 10, 18, 35, 0, DateTimeKind.Unspecified),
                            DetectionId = 1,
                            Message = "High confidence tiger detection in North Zone",
                            UserId = 1
                        },
                        new
                        {
                            AlertId = 2,
                            CreatedAt = new DateTime(2025, 6, 19, 14, 32, 5, 0, DateTimeKind.Unspecified),
                            DetectionId = 3,
                            Message = "Large animal detected in South Zone - requires attention",
                            UserId = 2
                        },
                        new
                        {
                            AlertId = 3,
                            CreatedAt = new DateTime(2025, 6, 20, 8, 22, 50, 0, DateTimeKind.Unspecified),
                            DetectionId = 5,
                            Message = "Predator activity detected in West Zone",
                            UserId = 1
                        },
                        new
                        {
                            AlertId = 4,
                            CreatedAt = new DateTime(2025, 6, 20, 8, 25, 5, 0, DateTimeKind.Unspecified),
                            DetectionId = 6,
                            Message = "Wolf pack movement detected in West Zone",
                            UserId = 2
                        },
                        new
                        {
                            AlertId = 5,
                            CreatedAt = new DateTime(2025, 6, 20, 15, 2, 20, 0, DateTimeKind.Unspecified),
                            DetectionId = 8,
                            Message = "Bear sighting in North Zone - immediate attention required",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Animal", b =>
                {
                    b.Property<int>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("ConfidenceLevel")
                        .HasColumnType("REAL");

                    b.Property<int>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnimalId");

                    b.HasIndex("DetectionId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            AnimalId = 1,
                            ConfidenceLevel = 0.92f,
                            DetectionId = 1,
                            Species = "Siberian Tiger"
                        },
                        new
                        {
                            AnimalId = 2,
                            ConfidenceLevel = 0.88f,
                            DetectionId = 2,
                            Species = "Siberian Tiger"
                        },
                        new
                        {
                            AnimalId = 3,
                            ConfidenceLevel = 0.95f,
                            DetectionId = 3,
                            Species = "African Elephant"
                        },
                        new
                        {
                            AnimalId = 4,
                            ConfidenceLevel = 0.87f,
                            DetectionId = 4,
                            Species = "Reticulated Giraffe"
                        },
                        new
                        {
                            AnimalId = 5,
                            ConfidenceLevel = 0.91f,
                            DetectionId = 5,
                            Species = "African Lion"
                        },
                        new
                        {
                            AnimalId = 6,
                            ConfidenceLevel = 0.89f,
                            DetectionId = 6,
                            Species = "Gray Wolf"
                        },
                        new
                        {
                            AnimalId = 7,
                            ConfidenceLevel = 0.83f,
                            DetectionId = 7,
                            Species = "White-tailed Deer"
                        },
                        new
                        {
                            AnimalId = 8,
                            ConfidenceLevel = 0.94f,
                            DetectionId = 8,
                            Species = "Brown Bear"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.Property<int>("DetectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("BoundingBoxHeight")
                        .HasColumnType("REAL");

                    b.Property<float>("BoundingBoxWidth")
                        .HasColumnType("REAL");

                    b.Property<float>("BoundingBoxX")
                        .HasColumnType("REAL");

                    b.Property<float>("BoundingBoxY")
                        .HasColumnType("REAL");

                    b.Property<float>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetectedObject")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FrameNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrackingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DetectionId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("EventId");

                    b.HasIndex("MediaId");

                    b.ToTable("Detections");

                    b.HasData(
                        new
                        {
                            DetectionId = 1,
                            BoundingBoxHeight = 200f,
                            BoundingBoxWidth = 150f,
                            BoundingBoxX = 120.5f,
                            BoundingBoxY = 80.2f,
                            Confidence = 0.92f,
                            DetectedAt = new DateTime(2025, 6, 19, 10, 18, 30, 0, DateTimeKind.Unspecified),
                            DetectedObject = "tiger",
                            DeviceId = 1,
                            EventId = 1,
                            FrameNumber = 450,
                            MediaId = 1,
                            TrackingId = 1001
                        },
                        new
                        {
                            DetectionId = 2,
                            BoundingBoxHeight = 195f,
                            BoundingBoxWidth = 148f,
                            BoundingBoxX = 125f,
                            BoundingBoxY = 85f,
                            Confidence = 0.88f,
                            DetectedAt = new DateTime(2025, 6, 19, 10, 19, 15, 0, DateTimeKind.Unspecified),
                            DetectedObject = "tiger",
                            DeviceId = 1,
                            EventId = 1,
                            FrameNumber = 495,
                            MediaId = 1,
                            TrackingId = 1001
                        },
                        new
                        {
                            DetectionId = 3,
                            BoundingBoxHeight = 250f,
                            BoundingBoxWidth = 180f,
                            BoundingBoxX = 200f,
                            BoundingBoxY = 150f,
                            Confidence = 0.95f,
                            DetectedAt = new DateTime(2025, 6, 19, 14, 32, 0, 0, DateTimeKind.Unspecified),
                            DetectedObject = "elephant",
                            DeviceId = 2,
                            EventId = 2,
                            FrameNumber = 720,
                            MediaId = 3,
                            TrackingId = 2001
                        },
                        new
                        {
                            DetectionId = 4,
                            BoundingBoxHeight = 160f,
                            BoundingBoxWidth = 120f,
                            BoundingBoxX = 50f,
                            BoundingBoxY = 100f,
                            Confidence = 0.87f,
                            DetectedAt = new DateTime(2025, 6, 19, 14, 35, 30, 0, DateTimeKind.Unspecified),
                            DetectedObject = "giraffe",
                            DeviceId = 2,
                            EventId = 2,
                            FrameNumber = 0,
                            MediaId = 4,
                            TrackingId = 2002
                        },
                        new
                        {
                            DetectionId = 5,
                            BoundingBoxHeight = 130f,
                            BoundingBoxWidth = 100f,
                            BoundingBoxX = 300f,
                            BoundingBoxY = 200f,
                            Confidence = 0.91f,
                            DetectedAt = new DateTime(2025, 6, 20, 8, 22, 45, 0, DateTimeKind.Unspecified),
                            DetectedObject = "lion",
                            DeviceId = 4,
                            EventId = 3,
                            FrameNumber = 165,
                            MediaId = 5,
                            TrackingId = 4001
                        },
                        new
                        {
                            DetectionId = 6,
                            BoundingBoxHeight = 110f,
                            BoundingBoxWidth = 90f,
                            BoundingBoxX = 180f,
                            BoundingBoxY = 120f,
                            Confidence = 0.89f,
                            DetectedAt = new DateTime(2025, 6, 20, 8, 25, 0, 0, DateTimeKind.Unspecified),
                            DetectedObject = "wolf",
                            DeviceId = 4,
                            EventId = 3,
                            FrameNumber = 300,
                            MediaId = 5,
                            TrackingId = 4002
                        },
                        new
                        {
                            DetectionId = 7,
                            BoundingBoxHeight = 100f,
                            BoundingBoxWidth = 80f,
                            BoundingBoxX = 150f,
                            BoundingBoxY = 90f,
                            Confidence = 0.83f,
                            DetectedAt = new DateTime(2025, 6, 20, 12, 12, 30, 0, DateTimeKind.Unspecified),
                            DetectedObject = "deer",
                            DeviceId = 5,
                            EventId = 4,
                            FrameNumber = 0,
                            MediaId = 6,
                            TrackingId = 5001
                        },
                        new
                        {
                            DetectionId = 8,
                            BoundingBoxHeight = 180f,
                            BoundingBoxWidth = 140f,
                            BoundingBoxX = 220f,
                            BoundingBoxY = 180f,
                            Confidence = 0.94f,
                            DetectedAt = new DateTime(2025, 6, 20, 15, 2, 15, 0, DateTimeKind.Unspecified),
                            DetectedObject = "bear",
                            DeviceId = 1,
                            EventId = 5,
                            FrameNumber = 135,
                            MediaId = 7,
                            TrackingId = 1002
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.DetectionValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFalseNegative")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFalsePositive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTruePositive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ValidatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationNotes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DetectionId");

                    b.ToTable("DetectionValidations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DetectionId = 1,
                            IsFalseNegative = false,
                            IsFalsePositive = false,
                            IsTruePositive = true,
                            IsValidated = true,
                            ValidatedAt = new DateTime(2025, 6, 19, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidatedBy = "Admin",
                            ValidationNotes = "Confirmed tiger identification"
                        },
                        new
                        {
                            Id = 2,
                            DetectionId = 2,
                            IsFalseNegative = false,
                            IsFalsePositive = false,
                            IsTruePositive = true,
                            IsValidated = true,
                            ValidatedAt = new DateTime(2025, 6, 19, 11, 5, 0, 0, DateTimeKind.Unspecified),
                            ValidatedBy = "Admin",
                            ValidationNotes = "Same tiger - tracking confirmed"
                        },
                        new
                        {
                            Id = 3,
                            DetectionId = 3,
                            IsFalseNegative = false,
                            IsFalsePositive = false,
                            IsTruePositive = true,
                            IsValidated = true,
                            ValidatedAt = new DateTime(2025, 6, 19, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidatedBy = "Zoo Manager",
                            ValidationNotes = "Adult elephant confirmed"
                        },
                        new
                        {
                            Id = 4,
                            DetectionId = 4,
                            IsFalseNegative = false,
                            IsFalsePositive = false,
                            IsTruePositive = false,
                            IsValidated = false,
                            ValidatedAt = new DateTime(2025, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidatedBy = "",
                            ValidationNotes = ""
                        },
                        new
                        {
                            Id = 5,
                            DetectionId = 7,
                            IsFalseNegative = false,
                            IsFalsePositive = true,
                            IsTruePositive = false,
                            IsValidated = true,
                            ValidatedAt = new DateTime(2025, 6, 20, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidatedBy = "Wildlife Observer",
                            ValidationNotes = "False positive - was a large log"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            LastActive = new DateTime(2025, 6, 20, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "North Zone",
                            Status = "Online"
                        },
                        new
                        {
                            DeviceId = 2,
                            LastActive = new DateTime(2025, 6, 20, 14, 25, 0, 0, DateTimeKind.Unspecified),
                            Location = "South Zone",
                            Status = "Online"
                        },
                        new
                        {
                            DeviceId = 3,
                            LastActive = new DateTime(2025, 6, 19, 22, 45, 0, 0, DateTimeKind.Unspecified),
                            Location = "East Zone",
                            Status = "Offline"
                        },
                        new
                        {
                            DeviceId = 4,
                            LastActive = new DateTime(2025, 6, 20, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Zone",
                            Status = "Online"
                        },
                        new
                        {
                            DeviceId = 5,
                            LastActive = new DateTime(2025, 6, 20, 8, 15, 0, 0, DateTimeKind.Unspecified),
                            Location = "Central Zone",
                            Status = "Maintenance"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            EndTime = new DateTime(2025, 6, 19, 10, 25, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 6, 19, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            EventId = 2,
                            EndTime = new DateTime(2025, 6, 19, 14, 45, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 6, 19, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            EventId = 3,
                            EndTime = new DateTime(2025, 6, 20, 8, 35, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 6, 20, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            EventId = 4,
                            EndTime = new DateTime(2025, 6, 20, 12, 20, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 6, 20, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            EventId = 5,
                            EndTime = new DateTime(2025, 6, 20, 15, 15, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 6, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LogId");

                    b.HasIndex("DetectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            LogId = 1,
                            ActionType = "Login",
                            Level = "Info",
                            Message = "Admin logged into system",
                            Timestamp = new DateTime(2025, 6, 19, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 2,
                            ActionType = "Detection_Review",
                            DetectionId = 1,
                            Level = "Info",
                            Message = "Validated tiger detection",
                            Timestamp = new DateTime(2025, 6, 19, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 3,
                            ActionType = "Login",
                            Level = "Info",
                            Message = "Zoo Manager logged into system",
                            Timestamp = new DateTime(2025, 6, 19, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            LogId = 4,
                            ActionType = "Alert_Response",
                            DetectionId = 3,
                            Level = "Info",
                            Message = "Responded to elephant detection alert",
                            Timestamp = new DateTime(2025, 6, 19, 14, 33, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            LogId = 5,
                            ActionType = "System_Maintenance",
                            Level = "Warning",
                            Message = "Device maintenance scheduled for Central Zone",
                            Timestamp = new DateTime(2025, 6, 20, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 6,
                            ActionType = "Login",
                            Level = "Info",
                            Message = "Wildlife Observer logged into system",
                            Timestamp = new DateTime(2025, 6, 20, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            LogId = 7,
                            ActionType = "Detection_Review",
                            DetectionId = 7,
                            Level = "Info",
                            Message = "Marked detection as false positive",
                            Timestamp = new DateTime(2025, 6, 20, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            LogId = 8,
                            ActionType = "Emergency_Alert",
                            DetectionId = 8,
                            Level = "Critical",
                            Message = "Emergency alert triggered for bear sighting",
                            Timestamp = new DateTime(2025, 6, 20, 15, 2, 20, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MediaId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Media");

                    b.HasData(
                        new
                        {
                            MediaId = 1,
                            DeviceId = 1,
                            FilePath = "Media/Videos/north_zone_20250619_101500.jpg",
                            Timestamp = new DateTime(2025, 6, 19, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            Type = "Video"
                        },
                        new
                        {
                            MediaId = 2,
                            DeviceId = 1,
                            FilePath = "Media/Images/north_zone_20250619_101800.jpg",
                            Timestamp = new DateTime(2025, 6, 19, 10, 18, 0, 0, DateTimeKind.Unspecified),
                            Type = "Image"
                        },
                        new
                        {
                            MediaId = 3,
                            DeviceId = 2,
                            FilePath = "Media/Videos/south_zone_20250619_143000.jpg",
                            Timestamp = new DateTime(2025, 6, 19, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Type = "Video"
                        },
                        new
                        {
                            MediaId = 4,
                            DeviceId = 2,
                            FilePath = "Media/Images/south_zone_20250619_143500.jpg",
                            Timestamp = new DateTime(2025, 6, 19, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            Type = "Image"
                        },
                        new
                        {
                            MediaId = 5,
                            DeviceId = 4,
                            FilePath = "Media/Videos/west_zone_20250620_082000.jpg",
                            Timestamp = new DateTime(2025, 6, 20, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            Type = "Video"
                        },
                        new
                        {
                            MediaId = 6,
                            DeviceId = 5,
                            FilePath = "Media/Images/central_zone_20250620_121000.jpg",
                            Timestamp = new DateTime(2025, 6, 20, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            Type = "Image"
                        },
                        new
                        {
                            MediaId = 7,
                            DeviceId = 1,
                            FilePath = "Media/Videos/north_zone_20250620_150000.jpg",
                            Timestamp = new DateTime(2025, 6, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Video"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.TrackingRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DetectedObject")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PathJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrackingRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DetectedObject = "tiger",
                            DeviceId = 1,
                            EndTime = new DateTime(2025, 6, 19, 10, 19, 15, 0, DateTimeKind.Unspecified),
                            PathJson = "[[120.5, 80.2], [122.0, 82.0], [125.0, 85.0]]",
                            StartTime = new DateTime(2025, 6, 19, 10, 18, 30, 0, DateTimeKind.Unspecified),
                            TrackingId = 1001
                        },
                        new
                        {
                            Id = 2,
                            DetectedObject = "elephant",
                            DeviceId = 2,
                            EndTime = new DateTime(2025, 6, 19, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            PathJson = "[[200.0, 150.0], [205.0, 155.0], [210.0, 160.0]]",
                            StartTime = new DateTime(2025, 6, 19, 14, 32, 0, 0, DateTimeKind.Unspecified),
                            TrackingId = 2001
                        },
                        new
                        {
                            Id = 3,
                            DetectedObject = "lion",
                            DeviceId = 4,
                            EndTime = new DateTime(2025, 6, 20, 8, 25, 0, 0, DateTimeKind.Unspecified),
                            PathJson = "[[300.0, 200.0], [295.0, 205.0], [290.0, 210.0]]",
                            StartTime = new DateTime(2025, 6, 20, 8, 22, 45, 0, DateTimeKind.Unspecified),
                            TrackingId = 4001
                        },
                        new
                        {
                            Id = 4,
                            DetectedObject = "wolf",
                            DeviceId = 4,
                            EndTime = new DateTime(2025, 6, 20, 8, 27, 30, 0, DateTimeKind.Unspecified),
                            PathJson = "[[180.0, 120.0], [175.0, 125.0], [170.0, 130.0]]",
                            StartTime = new DateTime(2025, 6, 20, 8, 25, 0, 0, DateTimeKind.Unspecified),
                            TrackingId = 4002
                        },
                        new
                        {
                            Id = 5,
                            DetectedObject = "bear",
                            DeviceId = 1,
                            EndTime = new DateTime(2025, 6, 20, 15, 5, 0, 0, DateTimeKind.Unspecified),
                            PathJson = "[[220.0, 180.0], [225.0, 185.0], [230.0, 190.0]]",
                            StartTime = new DateTime(2025, 6, 20, 15, 2, 15, 0, DateTimeKind.Unspecified),
                            TrackingId = 1002
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "Admin",
                            Name = "Admin",
                            PasswordHash = "5SRIlSCJibQf71QS5CoWdj1fRi+9RNSbsB6dmH3RpXAgsfCxVNrIoZAiIIo5ygMVXgq3VkjslqIToO9c9Wrq+A==",
                            PasswordSalt = "dO62kXPqRC+Br7iiLDTj7liUAKzJV6psJtVa7AAzQERcdYsBl7aeY5jLS701BD7ow71+KoEZpY+ZUw+NypASzfhUX2zSLo0iAH0S3ohgAY7puhoaoXktEeCjxcwBmdZJvViGCYzfPoZVP1rH5KGb9JvCdE47T5c3YTwMN4Cr5Dw=",
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "manager@zootrack.com",
                            Name = "Zoo Manager",
                            PasswordHash = "TDMQsNtlgSKrOuK5JxO23OhxCeZPyWvFor3zSSbyQbzLDCh7vyqpx/RNp3odbD6Oc90OkgGHsqaAv4p9Q8oSNQ==",
                            PasswordSalt = "hV+3uIzB4lcAO/GDHBREIQuJYVIOcwER1detdnr0s+xkxQGBjiNsyeV0JLGrtUIZZU34W/JnA4ArcQ+5nRALa85KaKv+l18vOl2uuTyOGMHjTPuRyjzkYu5pngHf0V1gijOT4HjC91WbdWbre0paaCKdJk3JMr6oVzdqEcEjawg=",
                            Role = "Manager"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "observer@zootrack.com",
                            Name = "Wildlife Observer",
                            PasswordHash = "vJL4KhlWxS3YVRJVe8VskeABobBxNN+xC0YUbZbrFDv/3xkGw2jskpZxGwTcwU0N/K4ZSOCzCwFLFE/cf6bUPA==",
                            PasswordSalt = "Ubrp6HNkb+z+r9ItolR9JI+iQlyn2t8wR6uogk46AQeTAqHMcLQYb/9NgHfuwBKNZFzqzPO9R2zS0nu4T0jLvK8GUwBMZoI8BoQ5DeXwp1sVO0mkItIOLiIrtiLo/JXW1VM2PJH4W0knHbjiFTBANkueEMqV5ez/yx2sqaa+mFY=",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.UserSettings", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("DetectionThreshold")
                        .HasColumnType("REAL");

                    b.Property<string>("HighlightSavePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationPreference")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetAnimalsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DetectionThreshold = 0.8f,
                            HighlightSavePath = "Media/HighlightFrames/Admin",
                            NotificationPreference = "Email",
                            TargetAnimalsJson = "[\"person\",\"dog\",\"cow\",\"wolf\",\"tiger\",\"lion\",\"elephant\",\"giraffe\"]"
                        },
                        new
                        {
                            UserId = 2,
                            DetectionThreshold = 0.75f,
                            HighlightSavePath = "Media/HighlightFrames/Manager",
                            NotificationPreference = "SMS",
                            TargetAnimalsJson = "[\"tiger\",\"lion\",\"elephant\",\"bear\",\"wolf\"]"
                        },
                        new
                        {
                            UserId = 3,
                            DetectionThreshold = 0.85f,
                            HighlightSavePath = "Media/HighlightFrames/Observer",
                            NotificationPreference = "Email",
                            TargetAnimalsJson = "[\"bird\",\"deer\",\"fox\",\"rabbit\"]"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Alert", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany("Alerts")
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Animal", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany("Animals")
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.HasOne("ZooTrack.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTrack.Models.Event", "Event")
                        .WithMany("Detections")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTrack.Models.Media", "Media")
                        .WithMany("Detections")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Event");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("ZooTrack.Models.DetectionValidation", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany()
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");
                });

            modelBuilder.Entity("ZooTrack.Models.Log", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany()
                        .HasForeignKey("DetectionId");

                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.HasOne("ZooTrack.Models.Device", "Device")
                        .WithMany("Media")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ZooTrack.Models.UserSettings", b =>
                {
                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("ZooTrack.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Animals");
                });

            modelBuilder.Entity("ZooTrack.Models.Device", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("ZooTrack.Models.Event", b =>
                {
                    b.Navigation("Detections");
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.Navigation("Detections");
                });

            modelBuilder.Entity("ZooTrack.Models.User", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Logs");

                    b.Navigation("UserSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
