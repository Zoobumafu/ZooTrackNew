// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZooTrack.Data;

#nullable disable

namespace ZooTrackBackend.Migrations
{
    [DbContext(typeof(ZootrackDbContext))]
    [Migration("20250612124521_AddDetectionValidationDbSet")]
    partial class AddDetectionValidationDbSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ZooTrack.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlertId");

                    b.HasIndex("DetectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Alerts");

                    b.HasData(
                        new
                        {
                            AlertId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            DetectionId = 1,
                            Message = "Elephant herd detected at North Zone watering hole",
                            UserId = 2
                        },
                        new
                        {
                            AlertId = 2,
                            CreatedAt = new DateTime(2025, 1, 2, 14, 45, 0, 0, DateTimeKind.Unspecified),
                            DetectionId = 2,
                            Message = "Lion pride spotted in South Zone",
                            UserId = 1
                        },
                        new
                        {
                            AlertId = 3,
                            CreatedAt = new DateTime(2025, 1, 3, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            DetectionId = 3,
                            Message = "Rhino sighting at North Zone watering hole",
                            UserId = 3
                        },
                        new
                        {
                            AlertId = 4,
                            CreatedAt = new DateTime(2025, 1, 4, 8, 45, 0, 0, DateTimeKind.Unspecified),
                            DetectionId = 4,
                            Message = "Giraffe family detected in South Zone",
                            UserId = 2
                        },
                        new
                        {
                            AlertId = 5,
                            CreatedAt = new DateTime(2025, 1, 5, 15, 25, 0, 0, DateTimeKind.Unspecified),
                            DetectionId = 5,
                            Message = "Zebra crossing detected at West Zone river",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Animal", b =>
                {
                    b.Property<int>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("ConfidenceLevel")
                        .HasColumnType("REAL");

                    b.Property<int>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnimalId");

                    b.HasIndex("DetectionId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            AnimalId = 1,
                            ConfidenceLevel = 0.93f,
                            DetectionId = 1,
                            Species = "African Elephant"
                        },
                        new
                        {
                            AnimalId = 2,
                            ConfidenceLevel = 0.89f,
                            DetectionId = 1,
                            Species = "African Elephant"
                        },
                        new
                        {
                            AnimalId = 3,
                            ConfidenceLevel = 0.87f,
                            DetectionId = 2,
                            Species = "Lion"
                        },
                        new
                        {
                            AnimalId = 4,
                            ConfidenceLevel = 0.82f,
                            DetectionId = 2,
                            Species = "Lion"
                        },
                        new
                        {
                            AnimalId = 5,
                            ConfidenceLevel = 0.79f,
                            DetectionId = 2,
                            Species = "Lion"
                        },
                        new
                        {
                            AnimalId = 6,
                            ConfidenceLevel = 0.91f,
                            DetectionId = 3,
                            Species = "White Rhino"
                        },
                        new
                        {
                            AnimalId = 7,
                            ConfidenceLevel = 0.94f,
                            DetectionId = 4,
                            Species = "Giraffe"
                        },
                        new
                        {
                            AnimalId = 8,
                            ConfidenceLevel = 0.92f,
                            DetectionId = 4,
                            Species = "Giraffe"
                        },
                        new
                        {
                            AnimalId = 9,
                            ConfidenceLevel = 0.88f,
                            DetectionId = 5,
                            Species = "Zebra"
                        },
                        new
                        {
                            AnimalId = 10,
                            ConfidenceLevel = 0.86f,
                            DetectionId = 5,
                            Species = "Zebra"
                        },
                        new
                        {
                            AnimalId = 11,
                            ConfidenceLevel = 0.84f,
                            DetectionId = 5,
                            Species = "Zebra"
                        },
                        new
                        {
                            AnimalId = 12,
                            ConfidenceLevel = 0.79f,
                            DetectionId = 5,
                            Species = "Zebra"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.Property<int>("DetectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("BoundingBoxHeight")
                        .HasColumnType("REAL");

                    b.Property<float>("BoundingBoxWidth")
                        .HasColumnType("REAL");

                    b.Property<float>("BoundingBoxX")
                        .HasColumnType("REAL");

                    b.Property<float>("BoundingBoxY")
                        .HasColumnType("REAL");

                    b.Property<float>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetectedObject")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FrameNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrackingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DetectionId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("EventId");

                    b.HasIndex("MediaId");

                    b.ToTable("Detections");

                    b.HasData(
                        new
                        {
                            DetectionId = 1,
                            BoundingBoxHeight = 0f,
                            BoundingBoxWidth = 0f,
                            BoundingBoxX = 0f,
                            BoundingBoxY = 0f,
                            Confidence = 0.92f,
                            DetectedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = 1,
                            EventId = 1,
                            FrameNumber = 0,
                            MediaId = 1
                        },
                        new
                        {
                            DetectionId = 2,
                            BoundingBoxHeight = 0f,
                            BoundingBoxWidth = 0f,
                            BoundingBoxX = 0f,
                            BoundingBoxY = 0f,
                            Confidence = 0.85f,
                            DetectedAt = new DateTime(2025, 1, 2, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = 2,
                            EventId = 2,
                            FrameNumber = 0,
                            MediaId = 2
                        },
                        new
                        {
                            DetectionId = 3,
                            BoundingBoxHeight = 0f,
                            BoundingBoxWidth = 0f,
                            BoundingBoxX = 0f,
                            BoundingBoxY = 0f,
                            Confidence = 0.79f,
                            DetectedAt = new DateTime(2025, 1, 3, 10, 5, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = 1,
                            EventId = 3,
                            FrameNumber = 0,
                            MediaId = 3
                        },
                        new
                        {
                            DetectionId = 4,
                            BoundingBoxHeight = 0f,
                            BoundingBoxWidth = 0f,
                            BoundingBoxX = 0f,
                            BoundingBoxY = 0f,
                            Confidence = 0.88f,
                            DetectedAt = new DateTime(2025, 1, 4, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = 2,
                            EventId = 4,
                            FrameNumber = 0,
                            MediaId = 4
                        },
                        new
                        {
                            DetectionId = 5,
                            BoundingBoxHeight = 0f,
                            BoundingBoxWidth = 0f,
                            BoundingBoxX = 0f,
                            BoundingBoxY = 0f,
                            Confidence = 0.75f,
                            DetectedAt = new DateTime(2025, 1, 5, 15, 15, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = 4,
                            EventId = 5,
                            FrameNumber = 0,
                            MediaId = 5
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.DetectionValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFalseNegative")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFalsePositive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTruePositive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ValidatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationNotes")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DetectionId");

                    b.ToTable("DetectionValidations");
                });

            modelBuilder.Entity("ZooTrack.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            LastActive = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "North Zone - Watering Hole",
                            Status = "Online"
                        },
                        new
                        {
                            DeviceId = 2,
                            LastActive = new DateTime(2025, 1, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "South Zone - Savanna",
                            Status = "Online"
                        },
                        new
                        {
                            DeviceId = 3,
                            LastActive = new DateTime(2024, 12, 30, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "East Zone - Forest Edge",
                            Status = "Offline"
                        },
                        new
                        {
                            DeviceId = 4,
                            LastActive = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "West Zone - River Crossing",
                            Status = "Maintenance"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            EndTime = new DateTime(2025, 1, 1, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            EventId = 2,
                            EndTime = new DateTime(2025, 1, 2, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 1, 2, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            EventId = 3,
                            EndTime = new DateTime(2025, 1, 3, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 1, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            EventId = 4,
                            EndTime = new DateTime(2025, 1, 4, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 1, 4, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed"
                        },
                        new
                        {
                            EventId = 5,
                            EndTime = new DateTime(2025, 1, 5, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2025, 1, 5, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LogId");

                    b.HasIndex("DetectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            LogId = 1,
                            ActionType = "System Start",
                            Level = "Info",
                            Message = "System initialization complete",
                            Timestamp = new DateTime(2024, 12, 22, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 2,
                            ActionType = "User Login",
                            Level = "Info",
                            Message = "Admin logged in",
                            Timestamp = new DateTime(2024, 12, 25, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 3,
                            ActionType = "Detection Review",
                            DetectionId = 1,
                            Level = "Info",
                            Message = "Ranger Rick reviewed elephant detection",
                            Timestamp = new DateTime(2025, 1, 1, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            LogId = 4,
                            ActionType = "Settings Change",
                            Level = "Warning",
                            Message = "Detection threshold updated to 0.85",
                            Timestamp = new DateTime(2025, 1, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            LogId = 5,
                            ActionType = "Device Status",
                            Level = "Error",
                            Message = "Device East Zone went offline",
                            Timestamp = new DateTime(2025, 1, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            LogId = 6,
                            ActionType = "Media View",
                            DetectionId = 3,
                            Level = "Info",
                            Message = "Guide Tom accessed rhino sighting media",
                            Timestamp = new DateTime(2025, 1, 3, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            LogId = 7,
                            ActionType = "Alert Configuration",
                            Level = "Info",
                            Message = "Added new alert for endangered species",
                            Timestamp = new DateTime(2025, 1, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            LogId = 8,
                            ActionType = "System Maintenance",
                            Level = "Info",
                            Message = "Database backup completed",
                            Timestamp = new DateTime(2025, 1, 5, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MediaId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Media");

                    b.HasData(
                        new
                        {
                            MediaId = 1,
                            DeviceId = 1,
                            FilePath = "/storage/images/elephant_group_20250423.jpg",
                            Timestamp = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Image"
                        },
                        new
                        {
                            MediaId = 2,
                            DeviceId = 2,
                            FilePath = "/storage/videos/lion_pride_20250424.mp4",
                            Timestamp = new DateTime(2025, 1, 2, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Video"
                        },
                        new
                        {
                            MediaId = 3,
                            DeviceId = 1,
                            FilePath = "/storage/images/rhino_watering_20250426.jpg",
                            Timestamp = new DateTime(2025, 1, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Image"
                        },
                        new
                        {
                            MediaId = 4,
                            DeviceId = 2,
                            FilePath = "/storage/images/giraffe_family_20250427.jpg",
                            Timestamp = new DateTime(2025, 1, 4, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Image"
                        },
                        new
                        {
                            MediaId = 5,
                            DeviceId = 4,
                            FilePath = "/storage/videos/zebra_crossing_20250428.mp4",
                            Timestamp = new DateTime(2025, 1, 5, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Video"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@zootrack.local",
                            Name = "Admin",
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "ranger@zootrack.local",
                            Name = "Ranger Rick",
                            Role = "Ranger"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "sarah@zootrack.local",
                            Name = "Zoologist Sarah",
                            Role = "Researcher"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "tom@zootrack.local",
                            Name = "Guide Tom",
                            Role = "Guide"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.UserSettings", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("DetectionThreshold")
                        .HasColumnType("REAL");

                    b.Property<string>("NotificationPreference")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DetectionThreshold = 0.8f,
                            NotificationPreference = "Email"
                        },
                        new
                        {
                            UserId = 2,
                            DetectionThreshold = 0.7f,
                            NotificationPreference = "SMS"
                        },
                        new
                        {
                            UserId = 3,
                            DetectionThreshold = 0.85f,
                            NotificationPreference = "Both"
                        },
                        new
                        {
                            UserId = 4,
                            DetectionThreshold = 0.6f,
                            NotificationPreference = "None"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Alert", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany("Alerts")
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Animal", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany("Animals")
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.HasOne("ZooTrack.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTrack.Models.Event", "Event")
                        .WithMany("Detections")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTrack.Models.Media", "Media")
                        .WithMany("Detections")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Event");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("ZooTrack.Models.DetectionValidation", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany()
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");
                });

            modelBuilder.Entity("ZooTrack.Models.Log", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany()
                        .HasForeignKey("DetectionId");

                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.HasOne("ZooTrack.Models.Device", "Device")
                        .WithMany("Media")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ZooTrack.Models.UserSettings", b =>
                {
                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("ZooTrack.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Animals");
                });

            modelBuilder.Entity("ZooTrack.Models.Device", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("ZooTrack.Models.Event", b =>
                {
                    b.Navigation("Detections");
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.Navigation("Detections");
                });

            modelBuilder.Entity("ZooTrack.Models.User", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Logs");

                    b.Navigation("UserSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
