// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZooTrack.Data;

#nullable disable

namespace ZooTrack.Migrations
{
    [DbContext(typeof(ZootrackDbContext))]
    [Migration("20250424165729_UpdateModels")]
    partial class UpdateModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ZooTrack.Models.Alert", b =>
                {
                    b.Property<int>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AlertId");

                    b.HasIndex("DetectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("ZooTrack.Models.Animal", b =>
                {
                    b.Property<int>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("ConfidenceLevel")
                        .HasColumnType("REAL");

                    b.Property<int>("DetectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AnimalId");

                    b.HasIndex("DetectionId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.Property<int>("DetectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MediaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DetectionId");

                    b.HasIndex("EventId");

                    b.HasIndex("MediaId");

                    b.ToTable("Detections");
                });

            modelBuilder.Entity("ZooTrack.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            DeviceId = 1,
                            LastActive = new DateTime(2025, 4, 24, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Location = "North Zone",
                            Status = "Online"
                        },
                        new
                        {
                            DeviceId = 2,
                            LastActive = new DateTime(2025, 4, 24, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Location = "South Zone",
                            Status = "Offline"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ZooTrack.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MediaId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("ZooTrack.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@zootrack.local",
                            Name = "Admin",
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "ranger@zootrack.local",
                            Name = "Ranger Rick",
                            Role = "Ranger"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.UserSettings", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("DetectionThreshold")
                        .HasColumnType("REAL");

                    b.Property<string>("NotificationPreference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DetectionThreshold = 0.8f,
                            NotificationPreference = "Email"
                        },
                        new
                        {
                            UserId = 2,
                            DetectionThreshold = 0.7f,
                            NotificationPreference = "SMS"
                        });
                });

            modelBuilder.Entity("ZooTrack.Models.Alert", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany("Alerts")
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Animal", b =>
                {
                    b.HasOne("ZooTrack.Models.Detection", "Detection")
                        .WithMany("Animals")
                        .HasForeignKey("DetectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detection");
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.HasOne("ZooTrack.Models.Event", "Event")
                        .WithMany("Detections")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZooTrack.Models.Media", "Media")
                        .WithMany("Detections")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("ZooTrack.Models.Log", b =>
                {
                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.HasOne("ZooTrack.Models.Device", "Device")
                        .WithMany("Media")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ZooTrack.Models.UserSettings", b =>
                {
                    b.HasOne("ZooTrack.Models.User", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("ZooTrack.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZooTrack.Models.Detection", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Animals");
                });

            modelBuilder.Entity("ZooTrack.Models.Device", b =>
                {
                    b.Navigation("Media");
                });

            modelBuilder.Entity("ZooTrack.Models.Event", b =>
                {
                    b.Navigation("Detections");
                });

            modelBuilder.Entity("ZooTrack.Models.Media", b =>
                {
                    b.Navigation("Detections");
                });

            modelBuilder.Entity("ZooTrack.Models.User", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Logs");

                    b.Navigation("UserSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
