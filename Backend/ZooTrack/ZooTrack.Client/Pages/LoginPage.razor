@page "/login"
@layout LoginLayout
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using ZooTrack.Client.Services

<PageTitle>Login - ZooTrack</PageTitle>

<div class="card shadow-lg">
    <div class="card-body p-5">
        <div class="text-center mb-4">
            <i class="bi bi-camera-video-fill display-4 text-primary"></i>
            <h1 class="h3 mb-3 fw-normal">Welcome to ZooTrack</h1>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <div class="form-floating mb-3">
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="name@example.com" />
                <label for="email">Username</label>
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="form-floating mb-3">
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Password" />
                <label for="password">Password</label>
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <button class="w-100 btn btn-lg btn-primary" type="submit" disabled="@isBusy">
                @if (isBusy)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <text>Sign in</text>
                }
            </button>
        </EditForm>
        <div class="mt-3 text-center">
            <p class="text-muted small">Default Credentials: Admin / Admin</p>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;
    private bool isBusy = false;

    private async Task HandleLogin()
    {
        isBusy = true;
        errorMessage = string.Empty;

        var success = await AuthService.Login(loginModel);

        if (success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Login failed. Please check your credentials.";
            isBusy = false;
        }
    }
}
