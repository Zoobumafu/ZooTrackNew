@page "/detections"
@inject HttpClient Http
@inject ILogger<DetectionHistoryPage> Logger
@using System.Text.Json

<PageTitle>Detection History - ZooTrack</PageTitle>

<h3>Detection History</h3>
<p class="text-muted">Browse animal detection records and captured media</p>

<div class="row mb-3">
    <div class="col-md-3">
        <label for="animalType" class="form-label">Filter by Animal:</label>
        <select class="form-select" id="animalType" @bind="selectedAnimalType" @bind:after="LoadDetections">
            <option value="">All Animals</option>
            <option value="Lion">Lion</option>
            <option value="Elephant">Elephant</option>
            <option value="Giraffe">Giraffe</option>
            <option value="Zebra">Zebra</option>
            <option value="Monkey">Monkey</option>
            <option value="Bird">Bird</option>
            <option value="Other">Other</option>
        </select>
    </div>
    <div class="col-md-2">
        <label for="cameraSource" class="form-label">Camera:</label>
        <select class="form-select" id="cameraSource" @bind="selectedCamera" @bind:after="LoadDetections">
            <option value="">All Cameras</option>
            <option value="Camera-01">Camera 01</option>
            <option value="Camera-02">Camera 02</option>
            <option value="Camera-03">Camera 03</option>
            <option value="Camera-04">Camera 04</option>
        </select>
    </div>
    <div class="col-md-2">
        <label for="dateFrom" class="form-label">From Date:</label>
        <input type="date" class="form-control" id="dateFrom" @bind="dateFrom" @bind:after="LoadDetections" />
    </div>
    <div class="col-md-2">
        <label for="dateTo" class="form-label">To Date:</label>
        <input type="date" class="form-control" id="dateTo" @bind="dateTo" @bind:after="LoadDetections" />
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="LoadDetections" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
            Refresh
        </button>
        <button class="btn btn-outline-secondary" @onclick="ClearFilters">Clear Filters</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        @errorMessage
    </div>
}

@if (isLoading && detections == null)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading detections...</span>
        </div>
    </div>
}
else if (detections != null)
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <i class="bi bi-search me-2"></i>
                Detection Records (@detections.Count detections)
            </h5>
            <small class="text-muted">Last updated: @DateTime.Now.ToString("HH:mm:ss")</small>
        </div>
        <div class="card-body p-0">
            @if (detections.Count == 0)
            {
                <div class="text-center py-5">
                    <i class="bi bi-camera display-1 text-muted"></i>
                    <p class="text-muted mt-3">No detections found matching your criteria</p>
                </div>
            }
            else
            {
                <div class="detection-grid p-3">
                    @foreach (var detection in detections)
                    {
                        <div class="detection-card card h-100 shadow-sm @(detection.IsExpanded ? "expanded" : "")">
                            <div class="card-header bg-light d-flex justify-content-between align-items-center py-2">
                                <div class="d-flex align-items-center">
                                    <span class="badge @GetAnimalBadgeClass(detection.AnimalType) me-2">
                                        @detection.AnimalType
                                    </span>
                                    <small class="text-muted">@detection.CameraName</small>
                                </div>
                                <div class="d-flex align-items-center">
                                    <small class="text-muted me-2">@detection.DetectedAt.ToString("MM/dd HH:mm:ss")</small>
                                    <button class="btn btn-sm btn-outline-primary"
                                            @onclick="() => ToggleExpand(detection)"
                                            title="@(detection.IsExpanded ? "Collapse" : "Expand")">
                                        <i class="bi bi-@(detection.IsExpanded ? "chevron-up" : "chevron-down")"></i>
                                    </button>
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(detection.ImagePath))
                            {
                                <div class="detection-image-container">
                                    <img src="@detection.ImagePath"
                                         alt="Detection of @detection.AnimalType"
                                         class="detection-image"
                                         @onclick="() => ShowImageModal(detection)" />
                                    <div class="confidence-overlay">
                                        <span class="badge bg-success">@detection.Confidence.ToString("P1")</span>
                                    </div>
                                </div>
                            }

                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6 class="card-title mb-2">
                                            <i class="bi bi-@GetAnimalIcon(detection.AnimalType) me-2 text-primary"></i>
                                            @detection.AnimalType Detection
                                        </h6>
                                        <p class="card-text small text-muted mb-2">
                                            <i class="bi bi-geo-alt me-1"></i>
                                            Location: @detection.DetectionArea
                                        </p>
                                        <p class="card-text small text-muted mb-2">
                                            <i class="bi bi-bullseye me-1"></i>
                                            Confidence: @detection.Confidence.ToString("P1")
                                        </p>
                                    </div>
                                    <div class="col-md-6">
                                        <p class="card-text small text-muted mb-2">
                                            <i class="bi bi-camera-video me-1"></i>
                                            Camera: @detection.CameraName
                                        </p>
                                        <p class="card-text small text-muted mb-2">
                                            <i class="bi bi-clock me-1"></i>
                                            @detection.DetectedAt.ToString("MMM dd, yyyy HH:mm:ss")
                                        </p>
                                        @if (detection.AlertTriggered)
                                        {
                                            <p class="card-text small mb-2">
                                                <span class="badge bg-warning text-dark">
                                                    <i class="bi bi-bell-fill me-1"></i>Alert Triggered
                                                </span>
                                            </p>
                                        }
                                    </div>
                                </div>

                                @if (detection.IsExpanded)
                                {
                                    <hr class="my-3">
                                    <div class="expanded-details">
                                        <h6 class="mb-2">Detection Details</h6>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <p class="small mb-1"><strong>Bounding Box:</strong></p>
                                                <p class="small text-muted">
                                                    X: @detection.BoundingBox.X, Y: @detection.BoundingBox.Y<br>
                                                    Width: @detection.BoundingBox.Width, Height: @detection.BoundingBox.Height
                                                </p>
                                            </div>
                                            <div class="col-md-6">
                                                <p class="small mb-1"><strong>Processing Time:</strong></p>
                                                <p class="small text-muted">@detection.ProcessingTimeMs ms</p>

                                                @if (!string.IsNullOrEmpty(detection.Notes))
                                                {
                                                    <p class="small mb-1"><strong>Notes:</strong></p>
                                                    <p class="small text-muted">@detection.Notes</p>
                                                }
                                            </div>
                                        </div>

                                        <div class="mt-3">
                                            <button class="btn btn-sm btn-outline-primary me-2"
                                                    @onclick="() => DownloadImage(detection)"
                                                    disabled="@string.IsNullOrEmpty(detection.ImagePath)">
                                                <i class="bi bi-download me-1"></i>Download Image
                                            </button>
                                            @if (!string.IsNullOrEmpty(detection.VideoPath))
                                            {
                                                <button class="btn btn-sm btn-outline-success me-2"
                                                        @onclick="() => PlayVideo(detection)">
                                                    <i class="bi bi-play-circle me-1"></i>Play Video
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-outline-info"
                                                    @onclick="() => ShowDetails(detection)">
                                                <i class="bi bi-info-circle me-1"></i>Full Details
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
}

<!-- Image Modal -->
@if (selectedDetection != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @selectedDetection.AnimalType Detection - @selectedDetection.DetectedAt.ToString("MMM dd, yyyy HH:mm:ss")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseImageModal"></button>
                </div>
                <div class="modal-body text-center">
                    <img src="@selectedDetection.ImagePath"
                         alt="Detection of @selectedDetection.AnimalType"
                         class="img-fluid rounded"
                         style="max-height: 70vh;" />
                    <div class="mt-3">
                        <span class="badge bg-primary me-2">@selectedDetection.AnimalType</span>
                        <span class="badge bg-success me-2">@selectedDetection.Confidence.ToString("P1")</span>
                        <span class="badge bg-info">@selectedDetection.CameraName</span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="() => DownloadImage(selectedDetection)">
                        <i class="bi bi-download me-1"></i>Download
                    </button>
                    <button class="btn btn-secondary" @onclick="CloseImageModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .detection-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1rem;
        max-height: 80vh;
        overflow-y: auto;
    }

    .detection-card {
        transition: all 0.3s ease;
        border: none;
        border-radius: 12px;
        overflow: hidden;
    }

        .detection-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
        }

        .detection-card.expanded {
            grid-column: span 1;
        }

    .detection-image-container {
        position: relative;
        overflow: hidden;
    }

    .detection-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        cursor: pointer;
        transition: transform 0.3s ease;
    }

        .detection-image:hover {
            transform: scale(1.05);
        }

    .confidence-overlay {
        position: absolute;
        top: 10px;
        right: 10px;
    }

    .expanded-details {
        background-color: rgba(0,0,0,0.02);
        padding: 1rem;
        border-radius: 8px;
    }

    .badge {
        font-size: 0.75rem;
    }

    @@media (max-width: 768px) {
        .detection-grid

    {
        grid-template-columns: 1fr;
        max-height: none;
    }

    .detection-image {
        height: 150px;
    }

    }</style>


@code {
    private List<DetectionRecord>? detections;
    private bool isLoading = false;
    private string? errorMessage;
    private string selectedAnimalType = "";
    private string selectedCamera = "";
    private DateOnly? dateFrom;
    private DateOnly? dateTo;
    private DetectionRecord? selectedDetection;

    protected override async Task OnInitializedAsync()
    {
        // Set default date range to last 7 days
        dateTo = DateOnly.FromDateTime(DateTime.Today);
        dateFrom = DateOnly.FromDateTime(DateTime.Today.AddDays(-7));

        await LoadDetections();
    }

    private async Task LoadDetections()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var queryParams = new List<string>();

            if (!string.IsNullOrEmpty(selectedAnimalType))
                queryParams.Add($"animal={Uri.EscapeDataString(selectedAnimalType)}");

            if (!string.IsNullOrEmpty(selectedCamera))
                queryParams.Add($"camera={Uri.EscapeDataString(selectedCamera)}");

            if (dateFrom.HasValue)
                queryParams.Add($"from={dateFrom.Value:yyyy-MM-dd}");

            if (dateTo.HasValue)
                queryParams.Add($"to={dateTo.Value:yyyy-MM-dd}");

            var queryString = queryParams.Count > 0 ? "?" + string.Join("&", queryParams) : "";

            Logger.LogInformation("Loading detections with query: {Query}", queryString);

            var response = await Http.GetAsync($"api/detection{queryString}");

            if (response.IsSuccessStatusCode)
            {
                var jsonContent = await response.Content.ReadAsStringAsync();
                detections = JsonSerializer.Deserialize<List<DetectionRecord>>(jsonContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                // Sort by detection time descending (newest first)
                detections = detections?.OrderByDescending(d => d.DetectedAt).ToList();

                Logger.LogInformation("Successfully loaded {Count} detections", detections?.Count ?? 0);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to load detections: {response.StatusCode} - {errorContent}";
                Logger.LogError("Failed to load detections: {StatusCode} - {Error}", response.StatusCode, errorContent);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading detections: {ex.Message}";
            Logger.LogError(ex, "Exception while loading detections");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ClearFilters()
    {
        selectedAnimalType = "";
        selectedCamera = "";
        dateFrom = DateOnly.FromDateTime(DateTime.Today.AddDays(-7));
        dateTo = DateOnly.FromDateTime(DateTime.Today);
        await LoadDetections();
    }

    private void ToggleExpand(DetectionRecord detection)
    {
        detection.IsExpanded = !detection.IsExpanded;
        StateHasChanged();
    }

    private void ShowImageModal(DetectionRecord detection)
    {
        selectedDetection = detection;
        StateHasChanged();
    }

    private void CloseImageModal()
    {
        selectedDetection = null;
        StateHasChanged();
    }

    private async Task DownloadImage(DetectionRecord detection)
    {
        if (string.IsNullOrEmpty(detection.ImagePath))
        {
            Logger.LogWarning("No image path available for detection {Id}", detection.Id);
            return;
        }

        try
        {
            // Implement image download logic
            Logger.LogInformation("Downloading image for detection {Id}", detection.Id);
            // You can implement actual download logic here
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error downloading image for detection {Id}", detection.Id);
        }
    }

    private void PlayVideo(DetectionRecord detection)
    {
        if (string.IsNullOrEmpty(detection.VideoPath))
        {
            Logger.LogWarning("No video path available for detection {Id}", detection.Id);
            return;
        }

        try
        {
            // Implement video playback logic
            Logger.LogInformation("Playing video for detection {Id}", detection.Id);
            // You can implement actual video playback logic here
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error playing video for detection {Id}", detection.Id);
        }
    }

    private void ShowDetails(DetectionRecord detection)
    {
        try
        {
            // Implement detailed view logic
            Logger.LogInformation("Showing details for detection {Id}", detection.Id);
            // You can implement navigation to a detailed view page here
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error showing details for detection {Id}", detection.Id);
        }
    }

    private string GetAnimalBadgeClass(string animalType)
    {
        return animalType?.ToLower() switch
        {
            "lion" => "bg-warning text-dark",
            "elephant" => "bg-secondary",
            "giraffe" => "bg-info",
            "zebra" => "bg-dark",
            "monkey" => "bg-success",
            "bird" => "bg-primary",
            _ => "bg-light text-dark"
        };
    }

    private string GetAnimalIcon(string animalType)
    {
        return animalType?.ToLower() switch
        {
            "lion" => "badge-fill",
            "elephant" => "circle-fill",
            "giraffe" => "triangle-fill",
            "zebra" => "square-fill",
            "monkey" => "diamond-fill",
            "bird" => "star-fill",
            _ => "question-circle-fill"
        };
    }

    public class DetectionRecord
    {
        public int Id { get; set; }
        public DateTime DetectedAt { get; set; }
        public string AnimalType { get; set; } = "";
        public double Confidence { get; set; }
        public string CameraName { get; set; } = "";
        public string DetectionArea { get; set; } = "";
        public string? ImagePath { get; set; }
        public string? VideoPath { get; set; }
        public BoundingBox BoundingBox { get; set; } = new();
        public int ProcessingTimeMs { get; set; }
        public bool AlertTriggered { get; set; }
        public string? Notes { get; set; }
        public bool IsExpanded { get; set; } = false;
    }

    public class BoundingBox
    {
        public int X { get; set; }
        public int Y { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
    }
}