@page "/settings"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject ILogger<SettingsPage> Logger

<PageTitle>Settings - ZooTrack</PageTitle>

<h3>Settings</h3>
<p class="text-muted">Manage your application settings.</p>

<div class="card mt-4">
    <div class="card-header">
        Change Password
    </div>
    <div class="card-body">
        <EditForm Model="@changePasswordModel" OnValidSubmit="HandleChangePassword">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">@successMessage</div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="mb-3">
                <label for="oldPassword" class="form-label">Current Password</label>
                <InputText id="oldPassword" type="password" class="form-control" @bind-Value="changePasswordModel.OldPassword" />
                <ValidationMessage For="@(() => changePasswordModel.OldPassword)" />
            </div>
            <div class="mb-3">
                <label for="newPassword" class="form-label">New Password</label>
                <InputText id="newPassword" type="password" class="form-control" @bind-Value="changePasswordModel.NewPassword" />
                <ValidationMessage For="@(() => changePasswordModel.NewPassword)" />
            </div>
            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="changePasswordModel.ConfirmNewPassword" />
                <ValidationMessage For="@(() => changePasswordModel.ConfirmNewPassword)" />
            </div>
            <button type="submit" class="btn btn-primary" disabled="@isBusy">
                @if (isBusy)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
                Change Password
            </button>
        </EditForm>
    </div>
</div>

@code {
    private ChangePasswordModel changePasswordModel = new ChangePasswordModel();
    private string? successMessage;
    private string? errorMessage;
    private bool isBusy = false;

    private async Task HandleChangePassword()
    {
        isBusy = true;
        successMessage = null;
        errorMessage = null;

        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmNewPassword)
        {
            errorMessage = "New password and confirmation password do not match.";
            isBusy = false;
            return;
        }

        try
        {
            var request = new
            {
                OldPassword = changePasswordModel.OldPassword,
                NewPassword = changePasswordModel.NewPassword
            };
            var response = await Http.PostAsJsonAsync("api/auth/change-password", request);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Password changed successfully!";
                changePasswordModel = new ChangePasswordModel(); // Clear the form
            }
            else
            {
                errorMessage = "Failed to change password. Please ensure your current password is correct.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred.";
            Logger.LogError(ex, "Error changing password.");
        }
        finally
        {
            isBusy = false;
        }
    }

    public class ChangePasswordModel
    {
        [Required]
        public string OldPassword { get; set; }

        [Required]
        [MinLength(6, ErrorMessage = "The new password must be at least 6 characters long.")]
        public string NewPassword { get; set; }

        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmNewPassword { get; set; }
    }
}
