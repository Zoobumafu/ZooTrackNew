@page "/camera-dashboard"
@using Microsoft.AspNetCore.Components.Forms
@using ZooTrack.Client
@inject HttpClient Http
@inject ILogger<CameraDashboardPage> Logger

<style>
    .alert-settings {
        background: white;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-top: 15px;
        margin-bottom: 20px;
    }

    .alert-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
        margin-bottom: 10px;
        padding: 10px;
        background-color: #fdfdfd;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
    }

    .alert-left,
    .alert-middle,
    .alert-right {
        display: flex;
        align-items: center;
    }

    .alert-left {
        gap: 5px;
        flex-basis: 40%;
    }

    .alert-middle {
        flex: 1;
        gap: 10px;
        flex-basis: 45%;
    }

    .alert-right {
        flex-basis: 15%;
        justify-content: flex-end;
    }

    .alert-label {
        font-weight: bold;
        margin-right: 5px;
    }

    .remove-alert-btn {
        background-color: #e74c3c;
        color: white;
        border: none;
        padding: 6px 10px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.8rem;
    }

        .remove-alert-btn:hover {
            background-color: #c0392b;
        }

    .add-alert-btn {
        background-color: #1abc9c;
        color: white;
        padding: 8px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
    }

        .add-alert-btn:hover {
            background-color: #16a085;
        }

    .input-file-sm .custom-file-label::after {
        content: "Browse";
    }

    .input-file-sm .form-control-file {
        font-size: 0.875rem;
        height: calc(1.5em + .5rem + 2px);
        padding: .25rem .5rem;
    }

    .form-select-sm, .form-control-sm {
        min-height: calc(1.5em + .5rem + 2px);
    }
</style>

<h3>Multi-Camera Dashboard</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="AddNewStreamComponent">
        <span class="oi oi-plus" aria-hidden="true"></span> Add Camera Stream
    </button>
</div>

@if (isLoadingDevices || isLoadingAnimals)
{
    <p><em>@(isLoadingDevices ? "Loading available cameras..." : "") @(isLoadingAnimals ? "Loading available animals..." : "")</em></p>
}
else if ((availableDevices == null || !availableDevices.Any()))
{
    <p class="text-warning">No camera devices found or failed to load. Please ensure devices are configured in the backend and the API is accessible.</p>
}

@if (activeStreamConfigs.Any())
{
    <div class="row">
        @foreach (var config in activeStreamConfigs)
        {
            <div class="col-md-6 col-lg-4 mb-3" @key="config.InstanceId">
                <div class="card">
                    <div class="card-header">
                        Camera Stream: @(string.IsNullOrEmpty(config.UserGivenName)
                ? $"Instance {config.InstanceId}"
                : config.UserGivenName)
                        <button class="btn btn-sm btn-danger float-end"
                                @onclick="() => RemoveStreamComponent(config.InstanceId)">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="mb-2">
                            <label for=@($"cameraSelect_{config.InstanceId}") class="form-label">Select Camera:</label>
                            <select id=@($"cameraSelect_{config.InstanceId}")
                                    class="form-select form-select-sm"
                                    @bind="config.SelectedDeviceId">
                                <option value="0">-- Select a Camera --</option>
                                @foreach (var device in availableDevices ?? Enumerable.Empty<DeviceViewModel>())
                                {
                                    <option value="@device.DeviceId">
                                        @($"{device.DeviceId}: {device.Name} ({device.Location ?? "N/A"})")
                                    </option>
                                }
                            </select>
                        </div>

                        <div class="mb-2">
                            <label for=@($"streamName_{config.InstanceId}") class="form-label">Stream Name (Optional):</label>
                            <input type="text"
                                   id=@($"streamName_{config.InstanceId}")
                                   class="form-control form-control-sm"
                                   @bind="config.UserGivenName"
                                   placeholder="E.g., Entrance Cam" />
                        </div>

                        @if (config.SelectedDeviceId > 0)
                        {
                            <CameraStreamConfigurable CameraId="config.SelectedDeviceId" />

                            <div class="mt-2">
                                <h6 class="small">Controls for Camera ID: @config.SelectedDeviceId</h6>
                                <div class="mb-2">
                                    <label for=@($"targetAnimals_{config.InstanceId}") class="form-label small">Target Animals:</label>
                                    <input type="text"
                                           id=@($"targetAnimals_{config.InstanceId}")
                                           class="form-control form-control-sm"
                                           @bind="config.TargetAnimals"
                                           placeholder="lion,tiger" />
                                </div>
                                <div class="mb-2">
                                    <label for=@($"savePath_{config.InstanceId}") class="form-label small">Highlight Save Path:</label>
                                    <input type="text"
                                           id=@($"savePath_{config.InstanceId}")
                                           class="form-control form-control-sm"
                                           @bind="config.HighlightSavePath"
                                           placeholder=@($"highlights/cam{config.SelectedDeviceId}") />
                                </div>
                                <button class="btn btn-sm btn-success me-2"
                                        @onclick="() => StartProcessing(config)"
                                        disabled="config.IsProcessing || config.SelectedDeviceId == 0">
                                    <span class="oi oi-media-play" aria-hidden="true"></span> Start
                                </button>
                                <button class="btn btn-sm btn-warning"
                                        @onclick="() => StopProcessing(config)"
                                        disabled="!config.IsProcessing || config.SelectedDeviceId == 0">
                                    <span class="oi oi-media-stop" aria-hidden="true"></span> Stop
                                </button>
                                @if (!string.IsNullOrEmpty(config.ApiStatusMessage))
                                {
                                    <p class="small mt-1"
                                       style="color: @(config.ApiStatusMessage.Contains("Error") ? "red" : "blue")">
                                        API: @config.ApiStatusMessage
                                    </p>
                                }
                            </div>

                            <div class="alert-settings">
                                <h6>Alert Sounds for Camera ID: @config.SelectedDeviceId</h6>
                                @if (config.AlertSettings.Any())
                                {
                                    @foreach (var alertSetting in config.AlertSettings)
                                    {
                                        <div class="alert-row" @key="alertSetting.Id">
                                            <div class="alert-left">
                                                <label for=@($"animalAlertSelect_{alertSetting.Id}")
                                                       class="alert-label small">Animal:</label>
                                                <select id=@($"animalAlertSelect_{alertSetting.Id}")
                                                        class="form-select form-select-sm"
                                                        @bind="alertSetting.AnimalId"
                                                        @bind:after="() => OnAlertAnimalChanged(alertSetting)">
                                                    <option value="0">-- Select Animal --</option>
                                                    @foreach (var animal in availableAnimals ?? Enumerable.Empty<AnimalViewModel>())
                                                    {
                                                        <option value="@animal.AnimalId">@animal.Name</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="alert-middle">
                                                <label for=@($"mp3File_{alertSetting.Id}") class="alert-label small">Sound:</label>
                                                <InputFile id=@($"mp3File_{alertSetting.Id}")
                                                           OnChange="(e) => OnMp3FileSelected(e, alertSetting)"
                                                           accept=".mp3"
                                                           class="form-control form-control-file input-file-sm" />
                                                @if (!string.IsNullOrEmpty(alertSetting.Mp3FileName))
                                                {
                                                    <span class="small text-muted">(@alertSetting.Mp3FileName)</span>
                                                }
                                            </div>
                                            <div class="alert-right">
                                                <button class="remove-alert-btn"
                                                        @onclick="() => RemoveAlertSetting(config, alertSetting.Id)">
                                                    <span class="oi oi-x" aria-hidden="true"></span>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="small text-muted">No alert sounds configured for this camera.</p>
                                }
                                <button class="add-alert-btn"
                                        @onclick="() => AddNewAlertSetting(config)">
                                    <span class="oi oi-plus" aria-hidden="true"></span> Add Alert Sound
                                </button>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted"><em>Select a camera to enable stream, controls, and alerts.</em></p>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No camera streams added yet. Click "Add Camera Stream" to begin.</p>
}

@code {
    private List<StreamComponentConfig> activeStreamConfigs = new();
    private List<DeviceViewModel>? availableDevices;
    private List<AnimalViewModel>? availableAnimals;
    private bool isLoadingDevices = true;
    private bool isLoadingAnimals = true;

    protected override async Task OnInitializedAsync()
    {
        var loadDevices = LoadAvailableDevices();
        var loadAnimals = LoadAvailableAnimals();
        await Task.WhenAll(loadDevices, loadAnimals);
    }

    private async Task LoadAvailableDevices()
    {
        try
        {
            availableDevices = await Http.GetFromJsonAsync<List<DeviceViewModel>>("api/Device")
                               ?? new();
        }
        catch
        {
            availableDevices = new();
        }
        finally
        {
            isLoadingDevices = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableAnimals()
    {
        try
        {
            availableAnimals = await Http.GetFromJsonAsync<List<AnimalViewModel>>("api/Animal")
                               ?? new();
        }
        catch
        {
            availableAnimals = new();
        }
        finally
        {
            isLoadingAnimals = false;
            StateHasChanged();
        }
    }

    private void AddNewStreamComponent()
    {
        activeStreamConfigs.Add(new StreamComponentConfig { ParentPage = this });
        StateHasChanged();
    }

    private void RemoveStreamComponent(Guid instanceId)
    {
        var cfg = activeStreamConfigs.FirstOrDefault(c => c.InstanceId == instanceId);
        if (cfg != null)
        {
            activeStreamConfigs.Remove(cfg);
            StateHasChanged();
        }
    }

    private void AddNewAlertSetting(StreamComponentConfig config)
    {
        config.AlertSettings.Add(new AlertSettingViewModel());
        StateHasChanged();
    }

    private void RemoveAlertSetting(StreamComponentConfig config, Guid alertId)
    {
        var item = config.AlertSettings.FirstOrDefault(a => a.Id == alertId);
        if (item != null)
        {
            config.AlertSettings.Remove(item);
            StateHasChanged();
        }
    }

    private async Task OnMp3FileSelected(InputFileChangeEventArgs e, AlertSettingViewModel alertSetting)
    {
        var file = e.File;
        if (file != null)
        {
            alertSetting.Mp3FileName = file.Name;
            StateHasChanged();
        }
    }

    private void OnAlertAnimalChanged(AlertSettingViewModel alertSetting)
    {
        var ani = availableAnimals?.FirstOrDefault(a => a.AnimalId == alertSetting.AnimalId);
        alertSetting.AnimalName = ani?.Name ?? "";
        StateHasChanged();
    }

    private async Task StartProcessing(StreamComponentConfig cfg)
    {
        if (cfg.SelectedDeviceId == 0) return;
        var payload = new
        {
            CameraId = cfg.SelectedDeviceId,
            TargetAnimals = cfg.TargetAnimals.Split(',', StringSplitOptions.RemoveEmptyEntries).ToList(),
            HighlightSavePath = cfg.HighlightSavePath
        };
        var resp = await Http.PostAsJsonAsync("api/camera/start", payload);
        cfg.IsProcessing = resp.IsSuccessStatusCode;
        cfg.ApiStatusMessage = resp.IsSuccessStatusCode
            ? "Started"
            : $"Error: {resp.StatusCode}";
        StateHasChanged();
    }

    private async Task StopProcessing(StreamComponentConfig cfg)
    {
        if (cfg.SelectedDeviceId == 0) return;
        var resp = await Http.PostAsJsonAsync("api/camera/stop", new { CameraId = cfg.SelectedDeviceId });
        cfg.IsProcessing = !resp.IsSuccessStatusCode;
        cfg.ApiStatusMessage = resp.IsSuccessStatusCode
            ? "Stopped"
            : $"Error: {resp.StatusCode}";
        StateHasChanged();
    }

    public class StreamComponentConfig
    {
        public Guid InstanceId { get; set; } = Guid.NewGuid();
        public int SelectedDeviceId { get; set; }
        public string UserGivenName { get; set; } = "";
        public string TargetAnimals { get; set; } = "";
        public string HighlightSavePath { get; set; } = "";
        public bool IsProcessing { get; set; }
        public string ApiStatusMessage { get; set; } = "";
        public List<AlertSettingViewModel> AlertSettings { get; set; } = new();
        public CameraDashboardPage? ParentPage { get; set; }
    }

    public class DeviceViewModel
    {
        public int DeviceId { get; set; }
        public string Name { get; set; } = "";
        public string? Location { get; set; }
    }

    public class AnimalViewModel
    {
        public int AnimalId { get; set; }
        public string Name { get; set; } = "";
    }
}
