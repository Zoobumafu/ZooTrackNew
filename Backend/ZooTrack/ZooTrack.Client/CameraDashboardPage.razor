// FINAL FIX
@page "/camera-dashboard"
@attribute [Authorize]
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Collections.Concurrent
@inject HttpClient Http
@inject ILogger<CameraDashboardPage> Logger
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Camera Dashboard</PageTitle>

<h3>Camera Dashboard</h3>
<p class="text-muted">Manage and monitor all active camera streams.</p>

<!-- Global Controls -->
<div class="card mb-4">
    <div class="card-header">Global Controls</div>
    <div class="card-body">
        <div class="row align-items-end g-3">
            <div class="col-md-5">
                <label for="targetAnimals" class="form-label">Target Animals (comma-separated):</label>
                <input type="text" class="form-control" id="targetAnimals" @bind="globalTargetAnimals" placeholder="e.g., person, cat, dog" />
            </div>
            <div class="col-md-4">
                <label for="savePath" class="form-label">Base Highlight Save Path:</label>
                <input type="text" class="form-control" id="savePath" @bind="globalSavePath" placeholder="e.g., C:\ZooTrackHighlights" />
            </div>
            <div class="col-md-3">
                <div class="d-grid gap-2">
                    <button class="btn btn-primary" @onclick="DiscoverCameras" disabled="@isDiscovering">
                        @if (isDiscovering)
                        {
                            <span class="spinner-border spinner-border-sm me-1"></span>
                        }
                        Discover Cameras
                    </button>
                    <button class="btn btn-danger" @onclick="StopAllStreams">Stop All Streams</button>
                </div>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(apiError))
        {
            <div class="alert alert-danger mt-3 mb-0">@apiError</div>
        }
    </div>
</div>

<!-- Camera Streams Grid -->
@if (availableCameras == null && !isDiscovering)
{
    <div class="text-center p-4">
        <p>Click "Discover Cameras" to find connected devices.</p>
    </div>
}
else if (availableCameras != null && !availableCameras.Any() && !isDiscovering)
{
    <div class="text-center p-4">
        <p class="text-warning">No cameras were found. Ensure they are connected and drivers are installed.</p>
    </div>
}
else if (availableCameras != null)
{
    <div class="row">
        @foreach (var cam in availableCameras)
        {
            <div class="col-md-6 col-xl-4 mb-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-header d-flex justify-content-between">
                        <strong>@cam.Name</strong>
                        @{
                            var status = streamData.TryGetValue(cam.CameraId, out var data) ? data : new StreamData();
                        }
                        <span class="badge @(status.IsConnected ? "bg-success" : "bg-secondary")">
                            @(status.IsConnected ? "Connected" : "Offline")
                        </span>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(status.FrameSrc))
                        {
                            <img src="@status.FrameSrc" class="img-fluid rounded mb-2" alt="Stream from @cam.Name" />
                        }
                        else
                        {
                            <div class="bg-dark text-white d-flex align-items-center justify-content-center rounded mb-2" style="height: 200px;">
                                <i class="bi bi-camera-video-off fs-1"></i>
                            </div>
                        }

                        <p class="text-muted small mb-2" style="min-height: 20px;">Status: <em>@status.StatusMessage</em></p>

                        <div class="d-grid gap-2">
                            <button class="btn btn-sm btn-success" @onclick="() => StartStream(cam.CameraId)" disabled="@status.IsProcessing || !status.IsConnected">
                                <i class="bi bi-play-fill"></i> Start Stream
                            </button>
                            <button class="btn btn-sm btn-warning" @onclick="() => StopStream(cam.CameraId)" disabled="@(!status.IsProcessing)">
                                <i class="bi bi-stop-fill"></i> Stop Stream
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<CameraInfo> availableCameras = new List<CameraInfo>();
    private ConcurrentDictionary<int, StreamData> streamData = new();
    private ConcurrentDictionary<int, HubConnection> hubConnections = new();

    private string globalTargetAnimals = "person,cat,dog,bird";
    private string globalSavePath = "C:/ZooTrackHighlights";
    private string? apiError;
    private bool isDiscovering = false;

    private class StreamData
    {
        public string FrameSrc { get; set; } = "";
        public string StatusMessage { get; set; } = "Idle";
        public bool IsConnected { get; set; } = false;
        public bool IsProcessing { get; set; } = false;
    }

    public class CameraInfo
    {
        public int CameraId { get; set; }
        public string Name { get; set; }
        public bool IsActive { get; set; }
    }

    private async Task DiscoverCameras()
    {
        isDiscovering = true;
        apiError = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var cameras = await Http.GetFromJsonAsync<List<CameraInfo>>("api/camera/discover");
            availableCameras = cameras ?? new List<CameraInfo>();

            foreach (var cam in availableCameras)
            {
                streamData.TryAdd(cam.CameraId, new StreamData());
                if (!hubConnections.ContainsKey(cam.CameraId))
                {
                    await ConnectToHub(cam.CameraId);
                }
            }
        }
        catch (Exception ex)
        {
            apiError = $"Failed to discover cameras: {ex.Message}";
            Logger.LogError(ex, apiError);
        }
        finally
        {
            isDiscovering = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ConnectToHub(int cameraId)
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrEmpty(token))
        {
            HandleDisconnection(cameraId, "Auth token not found.");
            return;
        }

        var hubConnection = new HubConnectionBuilder()
            .WithUrl(new Uri(Http.BaseAddress, "cameraHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .WithAutomaticReconnect()
            .Build();

        if (!hubConnections.TryAdd(cameraId, hubConnection))
        {
            await hubConnection.DisposeAsync();
            return;
        }

        hubConnection.On<byte[]>("ReceiveFrame", (frameData) =>
        {
            if (streamData.TryGetValue(cameraId, out var data))
            {
                data.FrameSrc = $"data:image/jpeg;base64,{Convert.ToBase64String(frameData)}";
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string>("ReceiveStatus", (status) =>
        {
            if (streamData.TryGetValue(cameraId, out var data))
            {
                data.StatusMessage = status;
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.Closed += (error) => HandleDisconnection(cameraId, "Disconnected. Please refresh.");
        hubConnection.Reconnecting += (error) => HandleDisconnection(cameraId, "Reconnecting...");

        hubConnection.Reconnected += async (connectionId) =>
        {
            await hubConnection.InvokeAsync("SubscribeToCamera", cameraId);
            if (streamData.TryGetValue(cameraId, out var data))
            {
                data.IsConnected = true;
                data.StatusMessage = "Reconnected";
                await InvokeAsync(StateHasChanged);
            }
        };

        try
        {
            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("SubscribeToCamera", cameraId);
            if (streamData.TryGetValue(cameraId, out var data))
            {
                data.IsConnected = true;
                data.StatusMessage = "Connected";
            }
        }
        catch (Exception ex)
        {
            HandleDisconnection(cameraId, $"Connection failed: {ex.Message}");
            Logger.LogError(ex, "Failed to connect hub for Camera {CameraId}", cameraId);
        }
        await InvokeAsync(StateHasChanged);
    }

    private Task HandleDisconnection(int cameraId, string message)
    {
        if (streamData.TryGetValue(cameraId, out var data))
        {
            data.IsConnected = false;
            data.IsProcessing = false;
            data.StatusMessage = message;
            data.FrameSrc = "";
        }
        return InvokeAsync(StateHasChanged);
    }

    private async Task StartStream(int cameraId)
    {
        apiError = null;
        if (string.IsNullOrWhiteSpace(globalSavePath))
        {
            apiError = "Base highlight save path cannot be empty.";
            return;
        }

        var request = new
        {
            CameraIds = new List<int> { cameraId },
            TargetAnimals = globalTargetAnimals.Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries),
            HighlightSavePath = globalSavePath
        };

        var response = await Http.PostAsJsonAsync("api/camera/start", request);
        if (response.IsSuccessStatusCode)
        {
            if (streamData.TryGetValue(cameraId, out var data)) data.IsProcessing = true;
        }
        else
        {
            apiError = $"Failed to start camera {cameraId}: {await response.Content.ReadAsStringAsync()}";
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task StopStream(int cameraId)
    {
        var response = await Http.PostAsJsonAsync("api/camera/stop", new { CameraIds = new List<int> { cameraId } });
        if (response.IsSuccessStatusCode)
        {
            if (streamData.TryGetValue(cameraId, out var data)) data.IsProcessing = false;
        }
        else
        {
            apiError = $"Failed to stop camera {cameraId}: {await response.Content.ReadAsStringAsync()}";
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task StopAllStreams()
    {
        var response = await Http.PostAsJsonAsync("api/camera/stop", new { CameraIds = new List<int>() });
        if (response.IsSuccessStatusCode)
        {
            foreach (var data in streamData.Values)
            {
                data.IsProcessing = false;
            }
        }
        else
        {
            apiError = $"Failed to stop all streams: {await response.Content.ReadAsStringAsync()}";
        }
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        var tasks = hubConnections.Values.Select(conn => conn.DisposeAsync().AsTask());
        await Task.WhenAll(tasks);
        hubConnections.Clear();
    }
}
