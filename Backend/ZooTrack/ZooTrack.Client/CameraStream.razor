// ZooTrack.Client/Components/CameraStream.razor
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager // Keep for potential future use, though not for URL construction now
@inject HttpClient Http // Inject HttpClient directly
@inject ILogger<CameraStream> Logger
@implements IAsyncDisposable // To dispose the connection

<div class="camera-stream-container" style="min-height: 200px; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;">
    <h4>Camera Stream</h4>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <p>Status: <span style="@statusStyle">@statusMessage</span></p>
    }

    @if (isConnecting)
    {
        <p>Connecting to camera hub...</p>
    }
    else if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
    {
        <p style="color: red;">Could not connect to camera hub. Ensure the backend is running, CORS is configured correctly, and the backend URL is correct.</p>
        <button class="btn btn-secondary" @onclick="StartConnectionAsync">Retry Connection</button>
    }

    @if (!string.IsNullOrEmpty(currentFrameSrc))
    {
        <img src="@currentFrameSrc" alt="Camera Stream" style="max-width: 100%; height: auto; display: block;" />
    }
    else if (hubConnection?.State == HubConnectionState.Connected)
    {
        <p>Waiting for video stream...</p>
    }

</div>

@code {
    private HubConnection? hubConnection;
    private string? currentFrameSrc;
    private string statusMessage = "Initializing...";
    private string statusStyle = "color: grey;";
    private bool isConnecting = false;


    protected override async Task OnInitializedAsync()
    {
        await StartConnectionAsync();
    }

    private async Task StartConnectionAsync()
    {
        if (isConnecting || (hubConnection != null && hubConnection.State == HubConnectionState.Connected))
        {
            Logger.LogInformation("Connection attempt ignored: Already connecting or connected.");
            return;
        }

        isConnecting = true;
        statusMessage = "Connecting...";
        statusStyle = "color: orange;";
        currentFrameSrc = null;
        StateHasChanged();

        // --- *** NEW WAY TO BUILD HUB URL *** ---
        // Construct the URL directly from the HttpClient's BaseAddress
        string hubPath = "cameraHub"; // The path to your hub
        Uri? baseUri = Http.BaseAddress; // Get the base address configured in Program.cs

        if (baseUri == null)
        {
            Logger.LogError("HttpClient BaseAddress is not configured correctly in Program.cs.");
            statusMessage = "Error: HttpClient BaseAddress not configured.";
            statusStyle = "color: red;";
            isConnecting = false;
            StateHasChanged();
            return;
        }

        // Combine base URI and hub path carefully
        // Ensure there's only one '/' between base and path
        string baseUrlString = baseUri.AbsoluteUri.TrimEnd('/');
        string hubUrlString = $"{baseUrlString}/{hubPath}";
        Uri hubUrl = new Uri(hubUrlString);
        // --- *** END NEW WAY *** ---


        Logger.LogInformation("Attempting to connect to SignalR Hub at: {HubUrl}", hubUrl.AbsoluteUri);


        hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl, options =>
            { // Use the explicitly constructed hubUrl
              // options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
              // options.SkipNegotiation = true;
            })
            .WithAutomaticReconnect()
            .Build();

        // --- Register handlers (remain the same) ---
        hubConnection.On<byte[]>("ReceiveFrame", (frameData) => { /* ... */ InvokeAsync(StateHasChanged); });
        hubConnection.On<string>("ReceiveStatus", (status) => { /* ... */ InvokeAsync(StateHasChanged); });

        // --- Handle connection events (remain the same) ---
        hubConnection.Closed += async (error) => { /* ... */ await InvokeAsync(StateHasChanged); };
        hubConnection.Reconnecting += error => { /* ... */ return InvokeAsync(StateHasChanged); };
        hubConnection.Reconnected += connectionId => { /* ... */ return InvokeAsync(StateHasChanged); };


        // --- Start the connection (remains the same) ---
        try
        {
            await hubConnection.StartAsync();
            Logger.LogInformation("SignalR Hub connection established successfully. Connection ID: {ConnectionId}", hubConnection.ConnectionId);
            statusMessage = "Connected to hub. Waiting for backend to start processing...";
            statusStyle = "color: grey;";
            isConnecting = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to connect to SignalR Hub at {HubUrl}. Check backend logs and CORS.", hubUrl.AbsoluteUri);
            statusMessage = $"Connection failed: {ex.Message}";
            statusStyle = "color: red;";
            hubConnection = null;
            isConnecting = false;
        }
        finally
        {
            StateHasChanged();
        }
    }

    // --- DisposeAsync remains the same ---
    public async ValueTask DisposeAsync() { /* ... */ }
}